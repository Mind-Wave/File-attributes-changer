<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        gg==
</value>
  </data>
</root>